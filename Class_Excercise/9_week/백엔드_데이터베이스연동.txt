-데이터베이스 연동
    서블릿 데이터베이스 연동
        1) 웹 브라우저가 서블릿에게 회원 정보 요청
        2) memberServlet 은 요청을 받은 후 MemberDAO 객체를 생성하여 listMembers() 메소드를 호출
        3) listMembers()에서 다시 connDB() 메소드를 호출 하여 데이터베이스와 연결한 후 SQL문을 실행해 회원 정보를 조회
        4) 조회된 회원 정보를 MemberVO속성에 설정한 후 다시 ArrayList의 MemberVO를 차례대로 가져와 회원정보를 HTML 태그의 문자열로 만듦
        5) 만들어진 HTML태그를 웹 브라우저로 전송해서 회원정보를 출력  



<포워드 액션 테그>
<jsp:forwad page="포워딩할 jsp페이지"></jsp:forward>
requestDispatcher를 이용한 포워딩 방법을 포워드 액션 태그를 사용하여 자바 코드 없이도 포워딩 할 수 있음.

모델 2 : 웹 어플리케이션의 각 기능을 분리해서 구현 
모델 1 방식  :데이터베이스 연동같은 비즈니스 로직 작업과 그 결과를 나타내주는 작업을 동일한 jsp수행, 즉 모든 클라이언트의 요청과 비즈니스 로직 처리를 jsp가 담당하는 구조
-mvc  :   model -  view -  controller     : 일반 pc 프로그램 개발에 사용되는 디자인 패턴을 웹 어플리케이션에 도입 
        (로직처리부분,화면 부분, 요청 처리 부분  )

<스크립트 요소>
    <% %> : 스크립틀릿 scriptlet
    안에는 java 코드만 쓸 수 있음
    request.getParameter(""); -> 웹 브라이우저에 찍는 역할

    '내장 객체' : jsp 가 서블릿으로 변환될 때 컨테이너가 자동으로 생성시키는 서블릿 멤버 변수
                -request : 클라이언트의 요청 정보를 java에서 저장 -> html에서 화면에 띄움 (String str = request.getParameter("name");)
                            호출된 페이지와 포워드된 페이지까지만 공유
                -session : 웹 브라우저를 닫을 때까지 공유
                -application : 하나의 application 객체만 생성하고 클라이언트가 요청하는 모든 페이지가 application 객체를 공유 
                                웹 서버를 시작할 때 만들어짐, 서버를 내릴 때 삭제됨.
    '액션 테그' : jsp 표준 테그 . 페이지 사이에서 이동을 제어하거나 자바빈 생성시 주로 사용
                <jsp: 태그명/> <jsp:include page ="includeImage.jsp" flush ="true">
                                <jsp:param name ="name" value="포도"/>
                             </include>
                포워드 액션 태그 
                <jsp:forward page="포워딩 할 jsp페이지"></jsp:forward>
<프레임워크> 
    비기능적 요구사항을 만족하는 구조와 구현된 기능을 안정적으로 실행하도록 제어해주는 잘 만들어진 구조의 라이브러리 덩어리

    디자인패턴은 프레임워크의 핵심적인 특징
    프레임워크를 사용하는 애플리케이션에 그 패턴이 적용된다는 특징이 있음
    but 프레임워크는 디자인패턴이 아님.

    <구성요소>
    1) IOC(inversion of Control) : 제어의 역전. 인스턴스 생성부터 소멸까지의 생명주기 관리를 컨테이너가 대신 함.
                                   프레임워크의 동작원리를 제어흐름이 일반적인 프로그램 흐름과 반대로 동작
                                   spring 컨테이너는 ioc를 지원하고 ,메타데이터 (xml)을 통해 beans를 관리하고 어플리케이션의 중요부분을 형성
                                   spring 컨테이너는 관리되는 bean들을  의존성 주입 (Dependency Injection)을 통해 ioc를 지원
    
    2)클래스 라이브러리(classLibrary) 

    디자인패턴 + 라이브러리 = 프레임워크 

    3)Spring Framework 개요 : ejb를 주 프레임워크로 사용할 때 불편했던 점들을 해소 
                            java 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크

                            maven : spring 의 의존 라이브러리를 간편하게 추가할 . 수있도록 의존성 주입을 제공 (오픈소스 빌드툴)
                            
2.29
Dispatcher Server : 제일먼저 요청받는 부분 


controller 설정 
@Controller (" " )
    -endpoint 를 만들기 위한 annotation
    -요청과 응답을 처리한다
    -class상단에 작성한다.
@RequestMapping()
    -endpoint 생성
    -괄호 사이에 end point url를 작성에 외부에 노출 시킬 수 있다. 

