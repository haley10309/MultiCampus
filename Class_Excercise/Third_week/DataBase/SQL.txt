1. SQL
    stuctured Query Language 
    1-1. SQL 문장의 구성요소
        예약어 (reserved word)
        연산자 (operator) - 단항, 이항 연산자, 수식, 문제, 논리, 계층형 쿼리, set 연산자
        의사컬럼 (가상컬럼, pseudo column) _ROWNUM, ROWID(각 row가 저장된 주소값)
        함수 (function) - 내장 함수, 사용자 정의 함수
        표현식 (expression) 
            -select 리스트
            - WHERE
    1-2. terminology 
        - Row : 행
        - column : 열 , 보통 첫번째 열이 primary key임
    1-3. DDL 
        - CREATE : 객체 생성
            ex> CREATE TABLE table_name~~;
            1-3-1. 데이터 타입 
                INT /INTEGER : 정수
                SMALLINT : INT보다 작은 정수
                CHAR(n) / CHARACTER(n) : 길이가 n인 고정 길이의 문자열
                CHARCHAR(n) / CHARATER VARYING(n)/VARCHAR2(n) : 최대 길이가 n인 가변길이의 문자열
                NUMERIC(p,s) /DECIMAL(p,s) : 고정소수점 실수, p는 소수점 제외한 전체숫자 길이, s는 소수점 이하 길이
                PLOAT(n) : 길이가 n인 부동 소수점 실수 
                REAL : 부동 소수점 실수 
                DATE : 년, 월 , 일
                TIME : 시, 분, 초
                DATETIME : 날짜와 시간 
            1-3-2. 예시
                customer_id VARCHAR2(20) NOT NULL : customer_id를 길이가 최대 20인 가변 길이 문자열 데이터로 하고 , null을 허용하지 않음. (중복 가능)
                bonus_point INT DEFAULT 0 : bonus_point를 정수형으로 하고 , 입력된 bonus_point가 없다면 0이 기본으로 저장되도록 함.
                PRIMARY_KEY(customer_id) : 고객 아이디를 기본키로 지정
                UNIQUE(customer_name) : customer_name를 대체키로 지정, null 가능, 중복 불가

        - ALTER : 수정하기
            ex> ALTER TABLE DEPT01 MODIFY DNAME VARCHAR2(20);
            DEPT01테이블 안에 있는 DNAME이라는 열의 데이터 타입을 VARCHAR2(20)으로 바꿈
            1-3-3.
                ADD COLUMN 
                MODIFY COLUMN 
                DROP COLUMN

        - TRUNCATE : 삭제 (빠름, 복구도 안됨)
            ex> TRUNCATE TABLE DEP01;

    1-4. DML(data manipulation Language)
        - SELECT  : 테이블이나 뷰에 잇는 데이터 조회할 때 사용
            ex> SElECT * FROM DEPT01;
                FROM table_num1, table_name2;
                WHERE conditions ...
                GROUP BY column_name1, column_name2
                ORDER BY
        - INSERT : 테이블에 데이터 추가
            ex> INSERT INTO DEPT VALUES(50, '총무부' , '서울);
                INSERT INTO table_name(column_name1,column_name2) VALUES (value1, value2)
                INSERT into table_name SElECT statements ...;

        - UPDATE : 데이터 수정 
            ex> UPDATE DEPT SET LOC = '부산' WHERE DNAME = '총무부' ;
                UPDATE table_name SET column_name1 = value1,column_name2 = value2 WHERE conditions;                

        - DELETE : 데이터 삭제 
            ex> DELETE FROM DEPT WHERE DEPTNO=50;
            rollback; -> 다시 복구 

    1-5. DCL (Data Control Language) 
        - GRANT : 권한 할당 
            GRANT 권한명 TO 사용자 or ROLE명;
        - REVOKE : 할당된 
            REVOKE 권한명 FROM 사용자 or ROLE명;

    1-6. TCL (Transaction Control Language) : 데이터의 일관성을 유지한 채 안정적으로 데이터를 복구하기 위해 사용
        - COMMIT; 장기적 저장 버튼
        - ROLLBACK; 삭제하기 전으로 돌아감

    1-7. 제약 조건(CONSTRAINTS) 
        - NOT NULL
        - UNIQUE : 데이터의 유일성 보장 
                ex> ALTER TABLE EMP ADD CONSTRAINT EMP_uk_deptno UNIQUE (deptno);
                    ALTER TABLE EMP DROP CONSTRAINT EMP_uk_deptno;
        - PRIMARY_KEY : NOT NULL + UNIQUE 
                ex> CREATE TABLE emp5(empno NUMBER CONSTRAINT emp5_pk_empno PRIMARY_KEY);
                    ALTER TABLE EMP ADD CONSTRAINT EMP_pk_empno PRIMARY_KEY;
        - FOREIGN KEY : 참조 관계 컬럼은 데이터 형이 일치 해야 함
                ex> ALTER TABLE EMP ADD CONSTRAINT EMP_fk_deptno FOREIGN_KEY(deptno) REFERENCES dept (deptno);
                1) ON DELETE OPTION 
                    i)ON DELETE NO ACTION : 참조하는 테이블이 존재하면 삭제 불가
                    ii)ON DELETE CASCADE : 참조하는 테이블의 내용까지 삭제 

        - CHECK : 컬럼의 값을 어떤 특정 범위로 변환
        - DEFAULT : 데이터를 입력하지 않아도 지정된 값이 기본으로 입력 
                ex> CREATE TABLE emp2 
                    (컬럼 생략, 
                    hiredate Date ) 
    1-8. 데이터 조회
        - SELECT : 데이터 베이스로부터 저장되어 있는 데이터를 검색하는데 사용 
                ex> SELECT * FROM DEPT;
                별칭 부여 가능
                ex> SELECT ename, sal,comm,  sal * 12 + nvl(comm,0) ANNSAL from emp;
                산술 연산도 가능

        - NULL의 연산규칙 : NULL은 사칙 연산 적용해도 모두 NULL 임. 
        - CONCATENATION OPERATOR : 문자연결연산에서 null -[문자의 어떤 값 || NULL = 어떤 값 그대로]
            ex> select ename || job as "emp_job“ from emp;
        - DISTINCT : 동일한 데이터들이 중복되서 출력되지 않도록 정리
            ex> SELECT DISTINCT DEPTNO FROM EMP;
        - ORDER BY : 오름차순 혹은 내림차순으로 조회  (ASC : 오름차순 / DESC : 내림차순)
            ex> SELECT * FROM EMP ORDER BY SAL;
                SELECT * FROM EMP ORDER BY SAL DESC;
    1-9. WHERE 조건
        조건을 만족하는 데이터만 검색  SELECT *|{[DISTINCT] column_name|expression [alias],...} FROM table [WHERE condition(s)];
            ex> SELECT * FROM EMP WHERE SAL >= 3000;
            문자열은 대/소문자 구분함!

        1-9-1. 논리 연산자 
            (OR , AND)
            SELECT ename,job, sal  from emp where job = 'MANAGER' OR JOB = 'SALESMAN' AND SAL >1000;
            SELECT ENAME , JOB, SAL FROM EMP WHERE(JOB = 'MANAGER' OR JOB = 'SALESMAN') AND SAL >1000;

            (NOT / IN)
            ex> SELECT * FROM EMP WHERE NOT SAL = 3000; (SAL <>3000)
            특정 열의 데이터 값만 조회
            SELECT * FROM emp WHERE JOB in ('MANAGER', 'CLERK') ;

            (BETWEEN..AND...)
            하나의 컬럼 값이 특정 범위에 속하는지 확인
            ex> SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000; (이상, 이하 임)
            SELECT * FROM EMP WHERE SAL NOT BETWEEN 2000 AND 3000;

            (LIKE , 와일드카드)
            : 컬럼에 저장된 데이터의 일부가 포함된 데이터를 조회
            와일드 카드 : _(어떤 값이든 상관없이 한 개의 문자 데이터를 의미) % ( 길이와 상관없이 모든 문자 데이터를 의미)
            ex> SELECT * FROM EMP WHERE ENAME LIKE '_A%';
            SELECT * FROM EMP  WHERE ENAME LIKE 'F%';
            SELECT * FROM EMP WHERE ENAME LIKE '%AM%';
            SELECT * FROM EMP WHERE ENAME NOT LIKE '%AM%';

            (IS NULL)
            : 데이터가 null인지 조회 (= null 안됨)
            ex> SELECT * FROM EMP WHERE COMM IS NULL;
            SELECT * FROM EMP WHERE COMM IS NOT NULL; (NOT 을 붙일 때는 is 뒤에 )

    1-10. SET (집합)연산자
            (UNION , UNION ALL , MINUS , INTERSECT)
            합집합, 합집합(중복제거), 차집합, 교집합
            1-10-1. UNION (합집합 - 중복 제거)
                    select 리스트의ㅡ 컬럼의 갯수, 순서, 타입이 같아야 함. 
                    ex> SELECT deptno FROM emp
                        UNION
                        SELECT deptno FROM dept;

            1-10-2. MINUS (차집합)
                    ex> SELECT deptno FROM emp
                        MINUS
                        SELECT deptno from dept

            1-10-3. INTERSECT(교집합)
                    ex>
                    SELECT deptno FROM emp
                    INTERSECT
                    SELECT deptno FROM dept;

            Long 타입 사용 불가, ORDER BY 는 한 번만 사용 가능


    1-11. 오라클의 주요 함수
            내장함수 , 사용자 정의 함수 有
            1-11-1. 문자형 함수
                    INITCAP(char) - 첫번째 문자만 대문자, LOWER(char) - 전체 소문자 , UPPER(char)- 전체 대문자
                    ex> SELECT ENAME, INITCAP(ENAME), UPPER(ENAME), LOWER(ENAME) FROM EMP;

                    LENGTH(char) - 문자의 길이
                    ex> SELECT ENAME, LENGTH(ENAME) FROM EMP WHERE LENGTH(ENAME) >= 5;

                    CONCAT(CHAR, CHAR) - 문자열 연결
                    ex> SELECT CONCAT(EMPNO, ENAME), CONCAT(EMPNO, CONCAT(' : ', ENAME)) FROM EMP WHERE ENAME = 'SCOTT';

                    REPLACE(char, src_str, plc_str ) - 문자열 대치
                    ex> SELECT REPLACE('010-1234-5678', '-', '') AS REPLACE FROM DUAL;

                    SUBSTR(STR, 시작위치,추출길이 ):문자열 일부 반환
                    ex> SELECT JOB, SUBSTR(JOB, 3, 2), SUBSTR(JOB, 5) FROM EMP;

                    INSTR(STR, CHAR(찾으려는 문자)  [찾기 시작하는 문자 위치]) - 없으면 0 리턴
                    ex> SELECT INSTR('HELLO, ORACLE!', 'L') AS INSTR1, INSTR('HELLO, ORACLE!', 'L', 5) AS INSTR2 FROM DUAL;
                    
                    TRIM(str) : 공백 제거 
                    ex> SELECT TRIM(' _ORACLE_ ') AS TRIM, LTRIM(' +ORACLE+ ') AS LTRIM, RTRIM(' -ORACLE- ') AS RTRIM FROM DUAL;
            1-11-2. 숫자형 함수 
                    -ROUND(N,I) : n을 소수점 이하 i+1번째에서 반올림(i값이 없으면 소수점 첫번째 자리에서 반올림)
                    ex> SELECT ROUND(1234.5678, 2) AS ROUND1 FROM DUAL;

                    -TRUNC(n1, n2) : n1을 n2번째에서 버림
                    ex> SELECT TRUNC(1234.5678, 2) AS ROUND1 FROM DUAL;
                    
                    -CEIL(n) : n과 같거나 큰 정수반환
                    -FLOOR(n) : n보다 같거나 작은 정수반환
                    ex> SELECT CEIL(3.14) AS CEIL, FLOOR(3.14) AS FLOOR FROM DUAL;

                    -MOD (n2,n1) : n2/n1의 나머지 값
                    ex> select MOD (15,6) as MOD1, MOD(10,2) MOD2 FROM DUAL;

            1-12-3. 날짜형 함수
                    -SYSDATE : 시스템의 현재 날짜와 시간
                        ex> SELECT SYSDATE AS NOW, SYSDATE-1 AS YESTERDAY, SYSDATE+1 AS TOMORROW FROM DUAL;

                    -ADD_MONTHS(date, integer) : integer 개월 수 이후 날짜 데이터 반환
                        ex> SELECT SYSDATE, ADD_MONTHS(SYSDATE, 3) FROM DUAL;

                    -MONTHS_BETWEEN(date1, date2) : 두 날짜 간의 개월 수 차이
                        ex>SELECT EMPNO, ENAME, HIREDATE, SYSDATE, MONTHS_BETWEEN(HIREDATE, SYSDATE) AS MONTH1, MONTHS_BETWEEN(SYSDATE, HIREDATE) AS MONTH2 FROM EMP;

                    -NEXT_DAY(date, char) : date의 돌아오는 요일의 날짜
                    -LAST_DAY(date) : date가 속한 달이 마지막 날짜
                        ex> SELECT SYSDATE, NEXT_DAY(SYSDATE, 'monday'), LAST_DAY(SYSDATE) FROM DUAL;

                    -ROUND : 반올림 
                    -TRUNC : 버림
                        ex> SELECT SYSDATE,
                            ROUND(SYSDATE, 'CC')   AS CC,
                            ROUND(SYSDATE, 'YYYY') AS YYYY,
                            ROUND(SYSDATE, 'Q')    AS Q,
                            ROUND(SYSDATE, 'DDD')  AS DDD,
                            ROUND(SYSDATE, 'HH')   AS HH
                        FROM
                            DUAL;
                    - TO_CHAR : 날짜 데이터를 원하는 문자열로 출력
                        ex> SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS NOW FROM DUAL;
                            SELECT SYSDATE,
                                TO_CHAR(SYSDATE, ‘MM’) AS MM,
                                TO_CHAR(SYSDATE, ‘MON’) AS MON,
                                TO_CHAR(SYSDATE, ‘DD’) AS DD,
                                TO_CHAR(SYSDATE, ‘DY’) AS DY,
                                TO_CHAR(SYSDATE, ‘DAY’) AS DAY
                            FROM DUAL;

                    - TO_DATE : 문자 데이터를 날짜 데이터로 변환
                        ex>select to_date ('20210101','YYYY/MM/DD')as to_date
                        from dual;
                    - NULL 처리 함수 
                        - nvl(expr1, expr2) : expr1이 null이면 expr2을 출력
                        - nvl2(expr1, expr2, expr3) : expr1이 null이 아니면 expr2 출력, null이면 expr3을 출력
                            ex> SELECT EMPNO, ENAME, COMM, NVL2(COMM, 'X', 0) FROM EMP;

                    - 조건문 
                        - DECODE : 기준이 되는 데이터를 지정 후, 데이터 값에 따른 값 지정 
                            ex> SELECT EMPNO, ENAME, JOB, SAL,
                                    DECODE(JOB,
                                    'MANAGE', SAL*1.1,
                                    'SALESMAN', SAL*1.05,
                                    'ANALYST', SAL,
                                    SAL*1.03) AS UPSAL
                                FROM EMP;
                        - CASE 
                            ex> SELECT EMPNO, ENAME, JOB, SAL,
                                    CASE JOB
                                        WHEN 'MANAGE' THEN SAL*1.1
                                        WHEN 'SALESMAN' THEN SAL*1.05
                                        WHEN 'ANALYST' THEN SAL
                                        ELSE SAL*1.03
                                    END AS UPSAL
                                FROM EMP;
            1-13. 그룹함수(다중행 함수)
                여러 행을 바탕으로 하나의 결과 값을 도출해 내기 위해 사용하는 함수
                GROUP BY 절과 함께 사용하기도 하고, 생략되는 경우 조건에 맞는 모든 데이터에 적용

                -SUM : 지정한 데이터의 함
                    ex> SELECT SUM(COMM), SUM(SAL), SUM(DISTINCT SAL), SUM(ALL SAL) FROM EMP;
                - COUNT : 지정한 데이터의 갯수
                    ex> SELECT COUNT(*), COUNT(SAL), COUNT(DISTINCT SAL), COUNT(ALL SAL) FROM EMP;
                - MAX, MIN : 최대값, 최소값
                    ex> SELECT MAX(SAL), MIN(SAL) FROM EMP;
                - AVG : 평균
                    ex> SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30;
                - GROUP BY : 특정범위를 지정, where절 처리 후 그 결과에 대해 group by 적용됨. 별칭 사용 불가
                            select 절에 그룹함수를 제외한 모든 컬럼, 표현식은 반드시 group by 절에 명시해야 함.
                    ex> SELECT AVG(SAL), DEPTNO  FROM EMP GROUP by DEPTNO;
                        SELECT DEPTNO, JOB, AVG(SAL)
                        FROM EMP
                        GROUP BY DEPTNO, JOB
                        ORDER BY DEPTNO, JOB;
                - HAVING : select 문에 group by가 있을 때만 사용 가능, 그룹화된 결과 값의 범위를 제한, 별칭 사용 불가
                    ex> SELECT DEPTNO, JOB, AVG(SAL)
                        FROM EMP
                        GROUP BY DEPTNO, JOB
                        HAVING AVG(SAL) >= 2000
                        ORDER BY DEPTNO, JOB;
            --------순서---------
                5 : select
                1 : from
                2 : where
                3 : group by 
                4 : HAVING
                6 : ORDER BY
            --------------------

            1-14. 그 외
                - ROLLUP  : 명시한 열에 한 해, 결과 출력, 
                    ex> SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
                        FROM EMP
                        GROUP BY ROLLUP(DEPTNO, JOB);

                - Cube : 지정한 모든 열에서 가능한 조합의 결과를 모두 출력
                    ex> SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
                        FROM EMP
                        GROUP BY CUBE(DEPTNO, JOB);

                - grouping sets : 지정한 열을 각각 그룹화하여 결과 값 출력
                    ex> SELECT DEPTNO, JOB, COUNT(*)
                        FROM EMP
                        GROUP BY GROUPING SETS(DEPTNO, JOB);

                - LISTAGG ~ WITHIN GROUP : 가로로 나열할 열을 지정하고, 데이터 사이 넣을 구분자 지정 및 정렬
                    ex> SELECT DEPTNO, LISTAGG(ENAME, ‘,’) WITHIN GROUP(ORDER BY SAL DESC) AS ENAMES
                        FROM EMP
                        GROUP BY DEPTNO;
                
                - PIVOT : 기존 테이블 행을 열로 바꿈 
                    ex> SELECT *
                        FROM (SELECT DEPTNO, JOB, SAL FROM EMP)
                        PIVOT(MAX(SAL) FOR DEPTNO IN (10, 20, 30))
                        ORDER BY JOB;
            
            1-15. 조인
                서로 다른 테이블을 같이 출력하는 방법
                데카르트 곱, 카테시안 곱, 교차조인이라고도 함.
                ex> SELECT *
                    FROM EMP e,DEPT d
                    WHERE e.DEPTNO = d.DEPTNO
                    ORDER BY EMPNO;
                1-15-1. 등가조인 (내부조인, inner조인)
                        where절의 조건식을 사용하여 테이블 조인 시 반드시 각 테이블을 연결하는 조건식이 최소한 전체 테이블 수 보다 하나 적은 수 만큼 있어야 함.
                1-15-2. 비등가조인(non-equi join)
                        특정 열이 일치하지 않는 경우 다른 방식으로 조인 가능
                        ex> select *
                            from salgrade s, emp e
                            where e.sal BETWEEN s.losal and s.hisal
                1-15-3. 자체조인(self join)
                        하나의 테이블을 여러개의 테이블처럼 활용하여 조인하는 방식
                        ex> SELECT 
                                E1.EMPNO, 
                                E1.ENAME, 
                                E1.MGR, 
                                E2.EMPNO AS MGR_EMPNO, 
                                E2.ENAME AS MGR_ENAME
                            FROM EMP E1, EMP E2
                            WHERE E1.MGR = E2.EMPNO;
                1-15-4. 외부조인(outer join)
                        조인 기준의 열의 한 쪽이 null 이어도 강제 출력하는 방식
                        ex> SELECT E1.EMPNO, E1.ENAME, E1.MGR,
                                    E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
                            FROM EMP E1, EMP E2
                            WHERE E1.MGR = E2.EMPNO(+)
                            ORDER BY E1.EMPNO;
                        
                            SELECT E1.EMPNO, E1.ENAME, E1.MGR,
                                    E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
                            FROM EMP E1, EMP E2
                            WHERE E1.MGR(+) = E2.EMPNO
                            ORDER BY E1.EMPNO;
                1-15-5. ANSI join (표준 문법 조인)

                1-16. 서브쿼리 
                    쿼리 안에 쿼리를 쓰는 것. SElECT, INSERT , DELETE, UPDATE 모두 사용 가능
                    1-16-1. 단일행 서브쿼리
                            실행결과가 단 하나의 행으로 출력되는 서브쿼리
                            ex> SELECT *
                                FROM EMP
                                WHERE HIREDATE < ( SELECT HIREDATE FROM EMP WHERE ENAME = ‘SCOTT’)
                    1-16-2. 다중행 서브쿼리
                            실행결과가 여러개로 나오는 서브 쿼리
                            ex> SELECT * FROM EMP
                                WHERE SAL IN (SELECT MAX(SAL) 
                                FROM EMP GROUP BY DEPTNO);

                                SELECT * FROM EMP
                                WHERE EXISTS (SELECT DNAME FROM DEPT WHERE DEPTNO = 10);
                    1-16-3. 인라인 뷰
                            from절에 사용할 서브 쿼리
                            SELECT E10.EMPNO, E10.ENAME, E10.DEPTNO, D.DNAME, D.LOC
                            FROM (SELECT * FROM EMP WHERE DEPTNO = 10) E10,
                            (SELECT * FROM DEPT) D
                            WHERE E10.DEPTNO = D.DEPTNO;
                    1-16-4. 스칼라 서브쿼리
                            select절에 사용할 서브쿼리
                            결과가 없으면 null을 출력, select 절에 명시하는 서브 쿼리는 반드시 하나의 결과만 반환되어야 함.







                
ㅊ